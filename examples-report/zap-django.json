{
  "@version":"2.9.0",
  "@generated":"Sat, 20 Jun 2020 13:04:14",
  "site":[
    {
      "@name":"http://192.168.168.2:8000",
      "@host":"192.168.168.2",
      "@port":"8000",
      "@ssl":"false",
      "alerts":[
        {
          "pluginid":"10021",
          "alert":"X-Content-Type-Options Header Missing",
          "name":"X-Content-Type-Options Header Missing",
          "riskcode":"1",
          "confidence":"2",
          "riskdesc":"Low (Medium)",
          "desc":"<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.<\/p>",
          "instances":[
            {
              "uri":"http://192.168.168.2:8000/static/main.css",
              "method":"GET",
              "param":"X-Content-Type-Options"
            }
          ],
          "count":"1",
          "solution":"<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.<\/p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.<\/p>",
          "otherinfo":"<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.<\/p><p>At \"High\" threshold this scanner will not alert on client or server error responses.<\/p>",
          "reference":"<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx<\/p><p>https://www.owasp.org/index.php/List_of_useful_HTTP_headers<\/p>",
          "cweid":"16",
          "wascid":"15",
          "sourceid":"3"
        },
        {
          "pluginid":"10096",
          "alert":"Timestamp Disclosure - Unix",
          "name":"Timestamp Disclosure - Unix",
          "riskcode":"0",
          "confidence":"1",
          "riskdesc":"Informational (Low)",
          "desc":"<p>A timestamp was disclosed by the application/web server - Unix<\/p>",
          "instances":[
            {
              "uri":"http://192.168.168.2:8000/register/",
              "method":"GET",
              "evidence":"31449600"
            },
            {
              "uri":"http://192.168.168.2:8000/register/",
              "method":"POST",
              "evidence":"31449600"
            },
            {
              "uri":"http://192.168.168.2:8000/login/",
              "method":"GET",
              "evidence":"31449600"
            }
          ],
          "count":"3",
          "solution":"<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.<\/p>",
          "otherinfo":"<p>31449600, which evaluates to: 1970-12-30 16:00:00<\/p>",
          "reference":"<p>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure<\/p><p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>",
          "cweid":"200",
          "wascid":"13",
          "sourceid":"3"
        },
        {
          "pluginid":"10016",
          "alert":"Web Browser XSS Protection Not Enabled",
          "name":"Web Browser XSS Protection Not Enabled",
          "riskcode":"1",
          "confidence":"2",
          "riskdesc":"Low (Medium)",
          "desc":"<p>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server<\/p>",
          "instances":[
            {
              "uri":"http://192.168.168.2:8000/?title=ZAP",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/login/",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/register/",
              "method":"POST",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/sitemap.xml",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/register/",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/login/",
              "method":"POST",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/about/",
              "method":"GET",
              "param":"X-XSS-Protection"
            },
            {
              "uri":"http://192.168.168.2:8000/robots.txt",
              "method":"GET",
              "param":"X-XSS-Protection"
            }
          ],
          "count":"10",
          "solution":"<p>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.<\/p>",
          "otherinfo":"<p>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: <\/p><p>X-XSS-Protection: 1; mode=block<\/p><p>X-XSS-Protection: 1; report=http://www.example.com/xss<\/p><p>The following values would disable it:<\/p><p>X-XSS-Protection: 0<\/p><p>The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).<\/p><p>Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).<\/p>",
          "reference":"<p>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet<\/p><p>https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/<\/p>",
          "cweid":"933",
          "wascid":"14",
          "sourceid":"3"
        },
        {
          "pluginid":"10010",
          "alert":"Cookie No HttpOnly Flag",
          "name":"Cookie No HttpOnly Flag",
          "riskcode":"1",
          "confidence":"2",
          "riskdesc":"Low (Medium)",
          "desc":"<p>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.<\/p>",
          "instances":[
            {
              "uri":"http://192.168.168.2:8000/register/",
              "method":"POST",
              "param":"csrftoken",
              "evidence":"Set-Cookie: csrftoken"
            },
            {
              "uri":"http://192.168.168.2:8000/register/",
              "method":"GET",
              "param":"csrftoken",
              "evidence":"Set-Cookie: csrftoken"
            },
            {
              "uri":"http://192.168.168.2:8000/login/",
              "method":"GET",
              "param":"csrftoken",
              "evidence":"Set-Cookie: csrftoken"
            }
          ],
          "count":"3",
          "solution":"<p>Ensure that the HttpOnly flag is set for all cookies.<\/p>",
          "reference":"<p>http://www.owasp.org/index.php/HttpOnly<\/p>",
          "cweid":"16",
          "wascid":"13",
          "sourceid":"3"
        },
        {
          "pluginid":"-1",
          "alert":"SQL Injection",
          "name":"SQL Injection",
          "riskcode":"3",
          "confidence":"2",
          "riskdesc":"High (Medium)",
          "desc":"<p>SQL Injection is an attack technique used to exploit applications that construct SQL statements from user-supplied input. When successful, the attacker is able to change the logic of SQL statements executed against the database.<\/p><p><\/p><p>Structured Query Language (SQL) is a specialized programming language for sending queries to databases. The SQL programming language is both an ANSI and an ISO standard, though many database products supporting SQL do so with proprietary extensions to the standard language. Applications often use user-supplied data to create SQL statements. If an application fails to properly construct SQL statements it is possible for an attacker to alter the statement structure and execute unplanned and potentially hostile commands. When such commands are executed, they do so under the context of the user specified by the application executing the statement. This capability allows attackers to gain control of all database resources accessible by that user, up to and including the ability to execute commands on the hosting system.<\/p>",
          "instances":[
            {
              "uri":"http://192.168.168.2:8000/?title=ZAP%27+UNION+ALL+select+NULL+--+",
              "method":"GET",
              "param":"title",
              "attack":"ZAP'+UNION+ALL+select+NULL+--+"
            }
          ],
          "count":"1",
          "solution":"<p>Phase: Architecture and Design<\/p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.<\/p><p>For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.<\/p><p><\/p><p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.<\/p><p><\/p><p>Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since you may re-introduce the possibility of SQL injection.<\/p><p><\/p><p>Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.<\/p><p><\/p><p>Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.<\/p><p><\/p><p>Phase: Implementation<\/p><p>If you need to use dynamically-generated query strings or commands in spite of the risk, properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).<\/p><p><\/p><p>Instead of building your own implementation, such features may be available in the database or programming language. For example, the Oracle DBMS ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql real escape string() API function is available in both C and PHP.<\/p><p><\/p><p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.<\/p><p><\/p><p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"<\/p><p><\/p><p>When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.<\/p><p><\/p><p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.<\/p><p><\/p><p>When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.<\/p>",
          "reference":"<p>http://projects.webappsec.org/SQL-Injection<\/p><p><\/p><p><\/p>",
          "cweid":"89",
          "wascid":"19",
          "sourceid":"2"
        },
        {
          "pluginid":"10202",
          "alert":"Absence of Anti-CSRF Tokens",
          "name":"Absence of Anti-CSRF Tokens",
          "riskcode":"1",
          "confidence":"2",
          "riskdesc":"Low (Medium)",
          "desc":"<p>No Anti-CSRF tokens were found in a HTML submission form.<\/p><p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.<\/p><p><\/p><p>CSRF attacks are effective in a number of situations, including:<\/p><p>    * The victim has an active session on the target site.<\/p><p>    * The victim is authenticated via HTTP auth on the target site.<\/p><p>    * The victim is on the same local network as the target site.<\/p><p><\/p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.<\/p>",
          "instances":[
            {
              "uri":"http://192.168.168.2:8000/?title=ZAP",
              "method":"GET",
              "evidence":"<form method=\"GET\" action=\"\" id=\"searchform\">"
            },
            {
              "uri":"http://192.168.168.2:8000/",
              "method":"GET",
              "evidence":"<form method=\"GET\" action=\"\" id=\"searchform\">"
            },
            {
              "uri":"http://192.168.168.2:8000",
              "method":"GET",
              "evidence":"<form method=\"GET\" action=\"\" id=\"searchform\">"
            }
          ],
          "count":"3",
          "solution":"<p>Phase: Architecture and Design<\/p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.<\/p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.<\/p><p><\/p><p>Phase: Implementation<\/p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.<\/p><p><\/p><p>Phase: Architecture and Design<\/p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).<\/p><p>Note that this can be bypassed using XSS.<\/p><p><\/p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.<\/p><p>Note that this can be bypassed using XSS.<\/p><p><\/p><p>Use the ESAPI Session Management control.<\/p><p>This control includes a component for CSRF.<\/p><p><\/p><p>Do not use the GET method for any request that triggers a state change.<\/p><p><\/p><p>Phase: Implementation<\/p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.<\/p>",
          "otherinfo":"<p>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret] was found in the following HTML form: [Form 1: \"searchbox\" ].<\/p>",
          "reference":"<p>http://projects.webappsec.org/Cross-Site-Request-Forgery<\/p><p>http://cwe.mitre.org/data/definitions/352.html<\/p>",
          "cweid":"352",
          "wascid":"9",
          "sourceid":"3"
        }
      ]
    }
  ]
}